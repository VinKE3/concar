// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}
enum estado {
  Vigente
  Inactivo
}
enum ambiente {
  Cliente
  Administrador
}
enum tipo {
  Master
  Plata
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  cargo         String?
  ambiente      ambiente?  @default(Cliente)
  tipo          tipo?      @default(Master)
  estado        estado? @default(Vigente)
  vencimiento  DateTime?
  fechaNacimiento DateTime?
  telefono      String? 
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  empresa    Empresa?
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Empresa {
  id            String    @id @default(cuid())
  empresa        String?
  ruc           String?
  nombre     String?
  documento     String?
  telefono      String?
  email         String?
  fechaAniversario DateTime?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}